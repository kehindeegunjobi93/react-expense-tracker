{"version":3,"sources":["firebaseConfig.js","redux/categories.js","redux/reducers.js","redux/store.js","components/AuthButton.js","components/AddCategory.js","components/CategoryList.js","components/AddExpense.js","components/ExpenseList.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","initialState","selectedCategory","categories","categoriesInitial","rootReducer","combineReducers","firebase","firebaseReducer","firestore","firestoreReducer","state","arguments","length","undefined","action","type","Object","objectSpread","category","initializeApp","settings","timestampsInSnapshots","enhancers","reduxFirestore","reactReduxFirebase","userProfile","useFirestoreForProfile","composedEnhancers","compose","apply","store","createStore","AuthButton","_this","this","isLoaded","props","auth","isEmpty","react_default","a","createElement","onClick","login","provider","style","width","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","logout","clearFirestore","stop","Component","connect","dispatch","firebaseConnect","AddCategory","add","collection","uid","name","setState","_this2","value","onChange","evt","target","addCategory","firestoreConnect","CategoryList","styles","padding","cursor","backgroundColor","key","selectCategory","categoryItems","map","renderCategory","components_AddCategory","ordered","c","where","AddExpense","description","cost","step","addExpense","ExpenseList","_ref","display","expenseItems","expenses","e","renderExpense","components_AddExpense","t","idx","orderBy","App","es","components_AuthButton","components_CategoryList","components_ExpenseList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bed4631.chunk.js","sourcesContent":["  // Initialize Firebase\r\n const firebaseConfig = {\r\n    apiKey: \"AIzaSyARYLiNfoOJRMJ_bTBJYwcSdsfv61ogWow\",\r\n    authDomain: \"expense-tracker-7a22b.firebaseapp.com\",\r\n    databaseURL: \"https://expense-tracker-7a22b.firebaseio.com\",\r\n    projectId: \"expense-tracker-7a22b\",\r\n    storageBucket: \"expense-tracker-7a22b.appspot.com\",\r\n    messagingSenderId: \"952454871753\"\r\n  };\r\n\r\n  export default firebaseConfig;","export const initialState = { selectedCategory: null }\r\n\r\nexport function reducer(state = initialState, action) {\r\n  if (action.type === \"selectCategory\") {\r\n    return { ...state, selectedCategory: action.category }\r\n  }\r\n  return state\r\n}","import { combineReducers } from 'redux';\r\nimport { firebaseReducer } from 'react-redux-firebase';\r\nimport { firestoreReducer } from 'redux-firestore';\r\nimport { reducer as categoriesReducer, initialState as categoriesInitial } from './categories'\r\n\r\nexport const initialState = {\r\n  categories: categoriesInitial\r\n}\r\n\r\nexport const  rootReducer = combineReducers({\r\n    firebase: firebaseReducer,\r\n    firestore: firestoreReducer,\r\n    categories: categoriesReducer\r\n})\r\n","import { createStore, compose } from 'redux'\r\nimport { reactReduxFirebase } from 'react-redux-firebase'\r\nimport { reduxFirestore } from 'redux-firestore'\r\n\r\n\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport 'firebase/firestore'\r\n\r\nimport firebaseConfig from '../firebaseConfig.js'\r\nimport { initialState, rootReducer } from './reducers'\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\nfirebase.firestore().settings({ timestampsInSnapshots: true })\r\n\r\n\r\n const enhancers = [\r\n    reduxFirestore(firebase),\r\n    reactReduxFirebase(firebase, {\r\n      userProfile: 'users',\r\n      useFirestoreForProfile: true,\r\n    })\r\n  ]\r\n\r\n  const composedEnhancers = compose(\r\n      ...enhancers\r\n  )\r\n\r\nconst store = createStore(rootReducer, initialState, composedEnhancers)\r\n\r\nexport default store\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { firebaseConnect, isLoaded, isEmpty } from 'react-redux-firebase'\r\n\r\n\r\nclass AuthButton extends Component {\r\n  static propTypes = {\r\n    auth: PropTypes.object,\r\n    firebase: PropTypes.shape({\r\n      login: PropTypes.func.isRequired,\r\n      logout: PropTypes.func.isRequired,\r\n    }),\r\n  }\r\n\r\n  render() {\r\n    if (!isLoaded(this.props.auth)) {\r\n      return null\r\n    }\r\n    if (isEmpty(this.props.auth)) {\r\n      return (\r\n        <div>\r\n          <button\r\n            onClick={\r\n              () => this.props.firebase.login({ provider: 'facebook', type: 'popup' })\r\n            }\r\n          >Log in with Facebook</button>\r\n        </div>\r\n      )\r\n    }\r\n    return <button\r\n      style={{ width: \"20rem\" }}\r\n      onClick={async () => {\r\n        await this.props.firebase.logout()\r\n        this.props.clearFirestore()\r\n      }}\r\n    > Logout</button >\r\n\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { auth: state.firebase.auth }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {\r\n      clearFirestore: () => dispatch({ type: '@@reduxFirestore/CLEAR_DATA' })\r\n  \r\n    }\r\n  }\r\n  \r\n  \r\n  export default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    firebaseConnect()\r\n  )(AuthButton)","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\n\r\nclass AddCategory extends Component {\r\n    static propTypes = {\r\n      uid: PropTypes.string,\r\n      firestore: PropTypes.shape({\r\n        add: PropTypes.func.isRequired\r\n      }).isRequired\r\n    }\r\n    state = { category: '' }\r\n\r\n    addCategory() {\r\n        this.props.firestore.add(\r\n          { collection: 'categories' },\r\n          {\r\n            uid: this.props.uid,\r\n            name: this.state.category\r\n          }\r\n        )\r\n        this.setState({ category: '' })\r\n      }\r\n\r\n    render() {\r\n        if (!this.props.uid) return null\r\n    \r\n        return (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.category}\r\n              onChange={(evt) => this.setState({ category: evt.target.value })}\r\n            />\r\n            <button onClick={(evt) => this.addCategory()}>Add Category</button>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n\r\n    const mapStateToProps = state => {\r\n         return {\r\n             uid: state.firebase.auth.uid,\r\n         }\r\n    }\r\n\r\n    const mapDispatchToProps = {}\r\n\r\n    export default compose(\r\n        connect(mapStateToProps, mapDispatchToProps),\r\n        firestoreConnect(),\r\n    )(AddCategory)","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\n\r\nimport AddCategory from './AddCategory'\r\n\r\nclass CategoryList extends Component {\r\n    static propTypes = {\r\n      uid: PropTypes.string,\r\n      categories: PropTypes.arrayOf(PropTypes.string),\r\n      selectedCategory: PropTypes.string,\r\n    selectCategory: PropTypes.func.isRequired,\r\n    }\r\n\r\n    renderCategory(category) {\r\n        const styles = {\r\n            padding: '1rem',\r\n            cursor: 'pointer'\r\n          }\r\n          if (category === this.props.selectedCategory) {\r\n            styles.backgroundColor = '#988afe'\r\n          }\r\n        return <div key={category}\r\n        style={styles}\r\n        onClick={() => this.props.selectCategory(category)}>\r\n          {category}\r\n        </div>\r\n      }\r\n\r\n      render() {\r\n          const categoryItems = this.props.categories.map(\r\n              (name) => this.renderCategory(name)\r\n          )\r\n          return(\r\n              <div>\r\n                  <div>\r\n                      {categoryItems}\r\n                  </div>\r\n                  <AddCategory />\r\n              </div>\r\n          )\r\n          }\r\n        }\r\n    \r\n      const mapStateToProps = state => {\r\n        return {\r\n          uid: state.firebase.auth.uid,\r\n          categories: state.firestore.ordered.categories ? state.firestore.ordered.categories.map(c => c.name) : [],\r\n          selectedCategory: state.categories.selectedCategory\r\n        }\r\n      }\r\n      \r\n      const mapDispatchToProps = dispatch => {\r\n        return {\r\n            selectCategory: category => dispatch({ type: 'selectCategory', category })\r\n          }\r\n      }\r\n    \r\n      export default compose(\r\n        connect(mapStateToProps, mapDispatchToProps),\r\n        firestoreConnect((props) => {\r\n          if (!props.uid) return []\r\n          return [\r\n            {\r\n              collection: 'categories',\r\n              where: [\r\n                ['uid', '==', props.uid]\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n        )\r\n      )(CategoryList)","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\n\r\n\r\nclass AddExpense extends Component {\r\n  static propTypes = {\r\n    uid: PropTypes.string,\r\n    selectedCategory: PropTypes.string,\r\n    firestore: PropTypes.shape({\r\n      add: PropTypes.func.isRequired\r\n    }).isRequired\r\n  }\r\n  state = { description: '', cost: 0 }\r\n\r\n  addExpense() {\r\n    this.props.firestore.add(\r\n      { collection: 'expenses' },\r\n      {\r\n        uid: this.props.uid,\r\n        description: this.state.description,\r\n        cost: this.state.cost,\r\n        category: this.props.selectedCategory\r\n      }\r\n    )\r\n    this.setState({ cost: 0, description: '' })\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.uid) return null\r\n    if (!this.props.selectedCategory) return null\r\n\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.description}\r\n          onChange={(evt) => this.setState({ description: evt.target.value })}\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          value={this.state.cost}\r\n          step=\"0.01\"\r\n          onChange={(evt) => this.setState({ cost: evt.target.value })}\r\n        />\r\n        <button onClick={(evt) => this.addExpense()}>Add Expense</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    uid: state.firebase.auth.uid,\r\n    selectedCategory: state.categories.selectedCategory\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {}\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  firestoreConnect(),\r\n)(AddExpense)","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\n\r\nimport AddExpense from './AddExpense'\r\n\r\n\r\nclass ExpenseList extends Component {\r\n  static propTypes = {\r\n    uid: PropTypes.string,\r\n    expenses: PropTypes.arrayOf(PropTypes.shape({\r\n      key: PropTypes.number.isRequired,\r\n      description: PropTypes.string,\r\n      cost: PropTypes.string\r\n    })),\r\n    selectedCategory: PropTypes.string,\r\n  }\r\n\r\n  renderExpense({ key, description, cost }) {\r\n    return (\r\n      <div key={key}>\r\n        <span style={{ display: \"inline-block\", width: '20rem' }}>{description}</span>\r\n        <span>{cost}</span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const expenseItems = this.props.expenses.map(\r\n      (e) => this.renderExpense(e)\r\n    )\r\n    return (\r\n      <div>\r\n        <div>\r\n          {expenseItems}\r\n        </div>\r\n        <AddExpense />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    uid: state.firebase.auth.uid,\r\n    expenses: state.firestore.ordered.expenses\r\n      ? state.firestore.ordered.expenses.map((t, idx) => {\r\n        return { key: idx, description: t.description, cost: t.cost }\r\n      })\r\n      : [],\r\n    selectedCategory: state.categories.selectedCategory\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {}\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  firestoreConnect((props) => {\r\n    if (!props.uid) return []\r\n    if (!props.selectedCategory) return []\r\n    return [\r\n      {\r\n        collection: 'expenses',\r\n        where: [\r\n          ['uid', '==', props.uid],\r\n          ['category', '==', props.selectedCategory]\r\n        ],\r\n        orderBy: ['cost', 'desc']\r\n      }\r\n    ]\r\n  }\r\n  )\r\n)(ExpenseList)","import React, { Component } from 'react';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\"\nimport AuthButton from \"./components/AuthButton\"\nimport CategoryList from \"./components/CategoryList\"\nimport ExpenseList from './components/ExpenseList'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div>\n        <AuthButton />\n        <CategoryList />\n        <ExpenseList />\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n    <App />, \n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}